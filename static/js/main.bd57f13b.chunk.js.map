{"version":3,"sources":["Player.js","Admin.js","firebase/firebaseApp.js","Login.js","App.js","reportWebVitals.js","index.js"],"names":["Player","props","className","videos","videoId","opts","height","width","playerVars","autoplay","mute","onEnd","event","remainingVideos","shift","set","ref","database","onPlay","target","unMute","setVolume","onClick","Admin","useState","Video","setVideo","isSpeaker","setisSpeaker","Submit","a","preventDefault","setIsSubmitting","containYoutube","test","containVideoId","newVideos","youtubeId","replace","push","alert","isSubmitting","size","color","loading","speedMultiplier","onSubmit","type","id","name","onChange","value","placeholder","hidden","disabled","result","window","confirm","to","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","databaseURL","Login","auth","getAuth","provider","GoogleAuthProvider","signInWithPopup","then","catch","error","getDatabase","firebaseApp","videosRef","App","setVideos","user","setuser","useEffect","onValue","snapshot","data","val","console","log","onAuthStateChanged","currentUser","path","exact","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAqDeA,MAhDf,SAAgBC,GAyBd,OACE,sBAAKC,UAAU,oBAAf,UAEqB,OAAjBD,EAAME,OAEJ,0DAIA,cAAC,IAAD,CACEC,QAASH,EAAME,OAAO,GACtBE,KAlCG,CACXC,OAAQ,MACRC,MAAO,MACPC,WAAY,CAEVC,SAAU,EACVC,KAAM,IA6BAC,MA1BI,SAACC,GACX,IAAIC,EAAkBZ,EAAME,OAC5BU,EAAgBC,QAChBC,YAAIC,YAAIf,EAAMgB,SAAU,WAAYJ,IAwB9BK,OArBK,SAACN,GAEdA,EAAMO,OAAOC,SACbR,EAAMO,OAAOE,UAAU,KAmBfnB,UAAU,WAIhB,wBAAQoB,QArBO,WACjBP,YAAIC,YAAIf,EAAMgB,SAAU,WAAY,KAoBJf,UAAU,QAAxC,6B,wDCsBSqB,EA/DD,SAACtB,GACb,MAA0BuB,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAAM,uCAAG,WAAOjB,GAAP,qBAAAkB,EAAA,sDACblB,EAAMmB,iBACN9B,EAAM+B,iBAAgB,GAClBC,EAAiB,cAAcC,KAAKT,GACpCU,EAAiB,UAAUD,KAAKT,GACjCQ,GAAkBE,GACbC,EAA6B,OAAjBnC,EAAME,OAAkBF,EAAME,OAAS,GAEnDkC,EAAYZ,EAAMa,QAAQ,gBAAiB,MAC/CF,EAAUG,KAAKF,GACftB,YAAIC,YAAIf,EAAMgB,SAAU,WAAYmB,GACpCV,EAAS,MAETc,MAAM,2BACNd,EAAS,IACTzB,EAAM+B,iBAAgB,IAfb,2CAAH,sDA8BZ,OACE,qBAAK9B,UAAU,cAAf,SAEID,EAAMwC,aAAe,cAAC,IAAD,CAAcC,KAAM,IAAKC,MAAO,UAAWC,QAAS3C,EAAMwC,aAAcI,gBAAiB,MAChH,gCACA,oBAAI3C,UAAU,SAAd,yCACA,uBAAM4C,SAAUjB,EAAQ3B,UAAU,OAAlC,UACE,uBACE6C,KAAK,OACLC,GAAG,QACHC,KAAK,QACLC,SArBS,SAACtC,GAChBc,EAASd,EAAMO,OAAOgC,QAqBhBA,MAAO1B,EACPvB,UAAU,WACVkD,YAAY,gCAEd,wBAAQL,KAAK,SAASM,QAAQ,EAAMC,SAAUrD,EAAMwC,kBAItD,qBAAKvC,UAAU,OAAOoB,QAxBP,WACjB,IAAIiC,EAASC,OAAOC,QAAQ,wMACnB7B,IAAT2B,IAsBE,SAEA,cAAC,IAAD,CAAMG,GAAI/B,EAAY,SAAW,IAAjC,sD,QC3CSgC,EAFHC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,YAAa,kF,uBCmBAC,EA5BD,WAqBZ,OACE,qBAAKlE,UAAU,SAAf,SACE,wBAAQA,UAAU,SAASoB,QAtBjB,WACZ,IAAM+C,EAAOC,cACPC,EAAW,IAAIC,IACrBC,YAAgBJ,EAAME,GAAUG,MAAK,SAACnB,OAMnCoB,OAAM,SAACC,QAaR,kC,QCbAP,EAAOC,cAITrD,EAAW4D,YAAYC,GACvBC,EAAY/D,YAAIC,EAAU,WA6Df+D,MA1Df,WACE,MAA4BxD,mBAAS,IAArC,mBAAOrB,EAAP,KAAe8E,EAAf,KACA,EAAwBzD,mBAAS,IAAjC,mBAAO0D,EAAP,KAAaC,EAAb,KACA,EAAwC3D,oBAAS,GAAjD,mBAAOiB,EAAP,KAAqBT,EAArB,KA+BA,OA7BAoD,qBAAU,WACVC,YAAQN,GAAW,SAACO,GAClB,IAAMC,EAAOD,EAASE,MACtBP,EAAUM,GACVE,QAAQC,IAAI,kBACZ1D,GAAgB,MAIlB2D,YAAmBtB,GAAM,SAACa,GACpBA,GAGFC,EAAQD,QAOX,IAGDE,qBAAU,WACRK,QAAQC,IAAIvF,GACZ,IAAMkE,EAAOC,cACbmB,QAAQC,IAAI,mBAAqBrB,EAAKuB,eACrC,CAACzF,IAGF,qBAAKD,UAAU,aAAf,SAUE,cAAC,IAAD,UACA,eAAC,IAAD,WAEIgF,EAAO,cAAC,IAAD,CAAOW,KAAK,8BAA8BC,OAAK,EAACC,QAAS,cAAC,EAAD,CAAO9E,SAAUA,EAAUd,OAAQA,EAAQ+E,KAAMA,EAAMzC,aAAcA,EAAcT,gBAAiBA,MACpK,cAAC,IAAD,CAAO6D,KAAK,8BAA8BC,OAAK,EAACC,QAAS,cAAC,EAAD,MAE3D,cAAC,IAAD,CAAOF,KAAK,oCAAoCC,OAAK,EAACC,QAAS,cAAC,EAAD,CAAQ9E,SAAUA,EAAUd,OAAQA,cC7D5F6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bd57f13b.chunk.js","sourcesContent":["import YouTube from \"react-youtube\";\r\nimport { set } from \"firebase/database\";\r\nimport { ref } from \"firebase/database\";\r\nimport \"./Player.css\";\r\n\r\nfunction Player(props) {\r\n  //https://youtu.be/py3zoTVmm2s\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"640\",\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n      mute: 1\r\n    },\r\n  };\r\n  const onEnd = (event) => {\r\n      let remainingVideos = props.videos;\r\n      remainingVideos.shift();\r\n      set(ref(props.database, '/videos'), remainingVideos);\r\n  };\r\n\r\n  const unMute = (event) => {\r\n    //unmute the video in case if the page already has interaction\r\n    event.target.unMute();\r\n    event.target.setVolume(40)\r\n  }\r\n  const clearQueue = () => {\r\n    set(ref(props.database, \"/videos\"), []);\r\n  };\r\n  return (\r\n    <div className=\"center background\">\r\n      {\r\n        props.videos === null ?\r\n        (\r\n          <p>There is no video to play</p>\r\n        ):\r\n        (\r\n\r\n          <YouTube\r\n            videoId={props.videos[0]}\r\n            opts={opts}\r\n            onEnd={onEnd}\r\n            onPlay={unMute}\r\n            className=\"player\"\r\n          />\r\n        )\r\n      }\r\n      <button onClick={clearQueue}  className=\"clear\">Clear Queue</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { set } from \"firebase/database\";\r\nimport { ref } from \"firebase/database\";\r\nimport './Admin.css'\r\nimport { Link } from \"react-router-dom\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\nconst Admin = (props) => {\r\n  const [Video, setVideo] = useState(\"\");\r\n  const [isSpeaker, setisSpeaker] = useState(false)\r\n  const Submit = async (event) =>  {\r\n    event.preventDefault();\r\n    props.setIsSubmitting(true);\r\n    let containYoutube = /youtube.com/.test(Video)\r\n    let containVideoId = /v=.{11}/.test(Video)\r\n    if(containYoutube && containVideoId){\r\n        let newVideos = props.videos !== null ? props.videos : [] ;\r\n        //get the id of the video\r\n        let youtubeId = Video.replace(/.+v=(.{11}).*/, '$1')\r\n        newVideos.push(youtubeId);\r\n        set(ref(props.database, '/videos'), newVideos);\r\n        setVideo('');\r\n    }else{\r\n        alert(\"It have to Youtube Link\");\r\n        setVideo(\"\");\r\n        props.setIsSubmitting(false);\r\n    }\r\n    \r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setVideo(event.target.value);\r\n  };\r\n\r\n  \r\n\r\n  const goToPlayer = () => {\r\n    let result = window.confirm(\"ဖွင့်မဲ့သူတယောက်ဘဲ ဒီ link ကိုသွားပါ (ok or cancel)\");\r\n    result ? setisSpeaker(true) : setisSpeaker(false)\r\n  }\r\n  return (\r\n    <div className=\"center dark\">\r\n      {\r\n        props.isSubmitting ? <BounceLoader size={150} color={\"#123abc\"} loading={props.isSubmitting} speedMultiplier={1.5} /> :\r\n      <div>\r\n      <h1 className='header'>Life Just Better With Music</h1>\r\n      <form onSubmit={Submit} className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"fname\"\r\n          name=\"fname\"\r\n          onChange={onChange}\r\n          value={Video}\r\n          className=\"textarea\"\r\n          placeholder=\"https://www.youtube.com/...\"\r\n        />\r\n        <button type=\"submit\" hidden={true} disabled={props.isSubmitting}></button>\r\n      </form>\r\n\r\n      \r\n      <div className=\"link\" onClick={goToPlayer}>\r\n\r\n      <Link to={isSpeaker ? 'player' : '#'} >Speaker သမား</Link>\r\n      </div>\r\n      </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDXrdBVeyDwU81QVfllPycfiGtiAjAnrpE\",\r\n  authDomain: \"react--queue-player.firebaseapp.com\",\r\n  projectId: \"react--queue-player\",\r\n  storageBucket: \"react--queue-player.appspot.com\",\r\n  messagingSenderId: \"393257056440\",\r\n  appId: \"1:393257056440:web:7686440fec372fb4961c4d\",\r\n  databaseURL: \"https://react--queue-player-default-rtdb.asia-southeast1.firebasedatabase.app\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nexport default app;","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { GoogleAuthProvider, getAuth, signInWithPopup } from \"firebase/auth\";\r\n\r\nconst Login = () => {\r\n  const logIn = () => {\r\n    const auth = getAuth();\r\n    const provider = new GoogleAuthProvider();\r\n    signInWithPopup(auth, provider).then((result) => {\r\n      // This gives you a Google Access Token. You can use it to access the Google API.\r\n      // const credential = GoogleAuthProvider.credentialFromResult(result);\r\n      // const token = credential.accessToken;\r\n      // The signed-in user info.\r\n      // const user = result.user;\r\n    }).catch((error) => {\r\n        // Handle Errors here.\r\n        // const errorCode = error.code;\r\n        // const errorMessage = error.message;\r\n        // The email of the user's account used.\r\n        // const email = error.email;\r\n        // The AuthCredential type that was used.\r\n        // const credential = GoogleAuthProvider.credentialFromError(error);\r\n        // ...\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"center\">\r\n      <button className=\"button\" onClick={logIn}>Login With Google</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import \"./App.css\";\r\nimport Player from \"./Player\";\r\nimport Admin from \"./Admin\";\r\nimport firebaseApp from './firebase/firebaseApp';\r\nimport { getDatabase } from \"firebase/database\";\r\nimport {ref, onValue} from 'firebase/database';\r\nimport { useState, useEffect } from \"react\";\r\nimport {  Routes, Route } from \"react-router-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Login from \"./Login\";\r\nimport { getAuth, onAuthStateChanged } from \"@firebase/auth\";\r\n//https://www.youtube.com/watch?v=jNQXAC9IVRw&ab_channel=jawed\r\n//https://www.youtube.com/watch?v=XbqFZMIidZI&ab_channel=PopCornRest-TikTok\r\n//https://www.youtube.com/watch?v=hS5CfP8n_js&ab_channel=Mr.Monk\r\nconst auth = getAuth();\r\n\r\n\r\n//database locaiton\r\nlet database = getDatabase(firebaseApp)\r\nlet videosRef = ref(database, '/videos')\r\n\r\n\r\nfunction App() {\r\n  const [videos, setVideos] = useState([]);\r\n  const [user, setuser] = useState('')\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n\r\n  useEffect(() => {\r\n  onValue(videosRef, (snapshot) => {\r\n    const data = snapshot.val();\r\n    setVideos(data);\r\n    console.log(\"data change :)\")\r\n    setIsSubmitting(false)\r\n  })\r\n  \r\n  //check if the user logged in\r\n  onAuthStateChanged(auth, (user) => {\r\n    if (user) {\r\n      // User is signed in, see docs for a list of available properties\r\n      // https://firebase.google.com/docs/reference/js/firebase.User\r\n      setuser(user)\r\n      // ...\r\n    } else {\r\n      // User is signed out\r\n      // ...\r\n    }\r\n  });\r\n}, [])\r\n\r\n//delete this in production\r\n  useEffect(() => {\r\n    console.log(videos)\r\n    const auth = getAuth();\r\n    console.log(\"this is the user\" + auth.currentUser)\r\n  }, [videos])\r\n\r\n  return (\r\n    <div className=\"fullheight\">\r\n      {/* <nav\r\n        style={{\r\n          borderBottom: \"solid 1px\",\r\n          paddingBottom: \"1rem\"\r\n        }}\r\n      >\r\n        <Link to=\"/player\">Player</Link> |{\" \"}\r\n        <Link to=\"/submit\">Video ထည့်မယ်ဗျို့</Link>\r\n      </nav> */}\r\n      <BrowserRouter>\r\n      <Routes>\r\n        {\r\n          user ? <Route path='react-youtube-queue-player/' exact element={<Admin database={database} videos={videos} user={user} isSubmitting={isSubmitting} setIsSubmitting={setIsSubmitting}/>} />:\r\n          <Route path='react-youtube-queue-player/' exact element={<Login />} />\r\n        }\r\n        <Route path='react-youtube-queue-player/player' exact element={<Player database={database} videos={videos}  />} />\r\n      </Routes>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}